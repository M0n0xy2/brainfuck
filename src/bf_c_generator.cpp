#include "bf_c_generator.hpp"

bf_c_generator::bf_c_generator(std::string path)
    : _output_stream(path)
{
    _indent_level = 1;
    _output_stream << "/* generated by bf2c */\n"
                   << "#include <stdio.h>\n"
                   << "#include <stdint.h>\n\n"
                   << "static uint8_t m[30000], *ptr = m;\n\n"
                   << "int main(void)\n"
                   << "{\n";
}

bf_c_generator::~bf_c_generator() {
    _output_stream << "}";
}

bool bf_c_generator::ready() const {
    return _output_stream.is_open();
}

void bf_c_generator::op_ptr_plus(size_t s) {
    _output_stream << _indent_string();
    if(s != 1)
        _output_stream << "ptr += " << s << ";\n";
    else
        _output_stream << "ptr++;\n";
}

void bf_c_generator::op_ptr_minus(size_t s) {
    _output_stream << _indent_string();
    if(s != 1)
        _output_stream << "ptr -= " << s << ";\n";
    else
        _output_stream << "ptr--;\n";

}

void bf_c_generator::op_value_plus(size_t s) {
    _output_stream << _indent_string();
    if(s != 1)
        _output_stream << "*ptr += " << s << ";\n";
    else
        _output_stream << "(*ptr)++;\n";
}

void bf_c_generator::op_value_minus(size_t s) {
    _output_stream << _indent_string();
    if(s != 1)
        _output_stream << "*ptr -= " << s << ";\n";
    else
        _output_stream << "(*ptr)--;\n";
}

void bf_c_generator::op_get() {
    _output_stream << _indent_string() << "(*ptr) = getchar();\n";
}

void bf_c_generator::op_put() {
    _output_stream << _indent_string() << "putchar(*ptr);\n";
}

void bf_c_generator::op_while_open() {
    _output_stream << _indent_string() << "while(*ptr) {\n";
    _indent_level++;
}
void bf_c_generator::op_while_end() {
    _indent_level--;
    _output_stream << _indent_string() << "}\n";
}

std::string bf_c_generator::_indent_string() const{
    return std::string(_indent_level * 4, ' ');
}

